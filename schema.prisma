generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Your pooled connection URL
  directUrl = env("POSTGRES_URL_NO_SSL") // Your direct connection URL
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  feeds         Feed[]
  votes         Vote[]
  readingTime   ReadingTime[]
  articleScores ArticleScore[]
  topicPreferences UserTopicPreference[]
}

model Feed {
  id          String   @id @default(cuid())
  title       String
  url         String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles    Article[]
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String
  url         String
  feedId      String
  publishedAt DateTime
  createdAt   DateTime @default(now())
  feed        Feed     @relation(fields: [feedId], references: [id], onDelete: Cascade)
  votes       Vote[]
  readingTime ReadingTime[]
  scores      ArticleScore[]
  topics      Topic[]
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  userId    String
  articleId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model ReadingTime {
  id        String   @id @default(cuid())
  duration  Int      // in seconds
  userId    String
  articleId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ArticleScore {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  score     Float    // Composite score based on various interactions
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Topic {
  id                String                @id @default(cuid())
  name              String                @unique
  articles          Article[]
  userPreferences   UserTopicPreference[]
}

model UserTopicPreference {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  score     Float    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
}